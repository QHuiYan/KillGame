import UIKit

print("——————— 1.数据类型 ———————")

var int_0 = 100
var float_0 = 3.14
var bool_0 = true
var bool_1 = false

// 最常见的数据类型有三种：整数型(Int)、浮点型(Float)、布尔型(Bool)；除此之外，还有元组、枚举、结构体、类等

print("——————— 2.整型数的具体类型 ———————")

var int_1: Int8 = -10
int_1 = 127
int_1 = -128

/* error_0
 int_1 = 128
 int_1 = -129 */

/* 整型数的基本类型有：UInt(默认)、UInt8、UInt16、UInt32、UInt64；Int(默认)、Int8、Int16、Int32、Int64；
 其中 U 开头的表示无符号类型，该类型的值不可带符号；后面的数字表示二进制的位数，也表示了其所能声明数字的范围 (例如二进制下的 8 位数一共有 256 个，所以 UInt8 和 Int8 最多显示 256 个数字；也就是前者为 0 ~ 255，后者为 -128 ~ 127)，这点在 error_0 中也清晰展示了出来；*/
 
/* error_1
 var int_2: Int = 3.14
 var int_3: Int = true */
 
/* 定义标识符时，如果不指定明确的数据类型，Siwft 会自动判断所定义的值的类型 (类型推断，如上文 1. 中内容所示)；
 从 error_0 中还可以发现，在定义一个标识符时，如果指定了类型，那么该标识符只能是该类型的值 */

print("——————— 3.浮点数的具体类型 ———————")

var float_1 = 0.12345_67890_12345_67890_12345_67890
var float_2: Float = 0.12345_67890_12345_67890_12345_67890
var float_3: Float16 = 0.12345_67890_12345_67890_12345_67890
var float_4: Float32 = 0.12345_67890_12345_67890_12345_67890
var float_5: Float64 = 0.12345_67890_12345_67890_12345_67890
var float_6: Double = 0.12345_67890_12345_67890_12345_67890

print(float_1, float_2, float_3, float_4, float_5, float_6)

// 与整型数的类型相似，通过观察输出到控制台的值就可以观察出规律了，不再赘述 (定义一个纯数字的值时，加下划线不会影响值的内容，可以使得更容易观察)

print("——————— 4.类型别名 ———————")

typealias Type_1 = Int8
var int_4: Type_1 = 123

// 通过 typealias 可以给已有的类型声明一个别名，该别名的功能等价于其对应的数据类型
